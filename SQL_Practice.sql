--DEPARTMENT TABLE CREATION 
 
CREATE TABLE Departments ( 
Id int GENERATED BY DEFAULT ON NULL AS IDENTITY , 
Name VARCHAR(25) NOT NULL, 
PRIMARY KEY(Id)); 
  
--drop table departments; 
--desc departments; 
  
INSERT INTO Departments VALUES (1, 'HR'); 
INSERT INTO Departments VALUES (2,'Sales'); 
INSERT INTO Departments VALUES (3, 'Tech'); 
  
--SELECT * FROM DEPARTMENTS ORDER BY ID; 
  
--EMPLOYEES TABLE CREATION 
 
CREATE TABLE EMPLOYEES(ID INT  GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, 
                       FNAME VARCHAR(25) NOT NULL, 
                       LNAME VARCHAR(25) NOT NULL, 
                       PHONENUMBER NUMBER(10) NOT NULL , 
                       MANAGERID INT, 
                       DEPARTMENTID INT NOT NULL, 
                       SALARY NUMBER NOT NULL, 
                       HIREDATE DATE NOT NULL, 
                       FOREIGN KEY(DEPARTMENTID) REFERENCES DEPARTMENTS(ID), 
                       FOREIGN KEY(MANAGERID) REFERENCES EMPLOYEES(ID), 
                       CONSTRAINT INVALID_NUMBER CHECK (REGEXP_LIKE(PhoneNumber, '^[0-9]{10}$') )); 
 
--DROP TABLE EMPLOYEES  
  
INSERT INTO EMPLOYEES VALUES(1,'James','Smith',1234567890,null,1,1000,to_date('01-01-2002','DD-MM-YYYY')); 
INSERT ALL INTO EMPLOYEES VALUES(2,'John','Johnson',2468101214,1,1,400,to_date('23-03-2005','DD-MM-YYYY')) 
           INTO EMPLOYEES VALUES(3,'Michael','Williams',1357911131,1,2,600,to_date('12-05-2009','DD-MM-YYYY')) 
           INTO EMPLOYEES VALUES(4,'Johnathon','Smith',1212121212,2,1,500,to_date('24-07-2016','DD-MM-YYYY')) 
           select * from employees;    
 
--customers table creation 
 
CREATE TABLE CUSTOMERS(ID INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, 
                       FNAME VARCHAR2(25) NOT NULL, 
                       LNAME VARCHAR2(25) NOT NULL, 
                       EMAIL VARCHAR2(100) NOT NULL, 
                       PHONENUMBER NUMBER(10), 
                       PREFERREDCONTACT VARCHAR2(10) DEFAULT 'EMAIL' CHECK (PREFERREDCONTACT IN ('PHONE','EMAIL')), 
                       CONSTRAINT INVALID_PNUMBER CHECK (REGEXP_LIKE(PhoneNumber, '^[0-9]{10}$'))) 
   
INSERT INTO CUSTOMERS VALUES(1,'William','Jones','william.jones@example.com',3347927472,'PHONE'); 
INSERT ALL INTO CUSTOMERS VALUES(2,'David','Miller','dmiller@example.net',2137921892,'EMAIL') 
           INTO CUSTOMERS VALUES(3,'Richard','Davis','richard0123@example.com',null,'EMAIL') 
           SELECT * FROM CUSTOMERS; 
  
--CARS TABLE CREATION 
 
CREATE TABLE CARS(ID INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, 
                  CUSTOMERID INT NOT NULL, 
                  EMPLOYEEID INT NOT NULL, 
                  CMODEL VARCHAR2(25) NOT NULL, 
                  STATUS VARCHAR(10) NOT NULL, 
                  TOTAL_COST NUMBER NOT NULL, 
                  FOREIGN KEY(CUSTOMERID) REFERENCES CUSTOMERS(ID), 
                  FOREIGN KEY(EMPLOYEEID) REFERENCES EMPLOYEES(ID)) 
  
INSERT INTO CARS VALUES(1,1,2,'Ford F-150','READY',230); 
INSERT ALL INTO CARS VALUES(2,1,2,'Ford F-150','READY',200) 
           INTO CARS VALUES(3,2,1,'Ford Mustang', 'WAITING',100) 
           INTO CARS VALUES(4,3,3,'Toyota Prius','WORKING',1254) 
           SELECT * FROM CARS 
  
--AUTHORS TABLE CREATION  
 
CREATE TABLE AUTHORS(ID INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, 
                     NAME VARCHAR(50) NOT NULL, 
                     COUNTRY VARCHAR(25) NOT NULL) 
  
INSERT INTO AUTHORS VALUES(1,'J.D. Salinga','USA'); 
INSERT ALL INTO AUTHORS VALUES(2,'F. Scott. Fitzgerald','USA') 
           INTO AUTHORS VALUES(3,'Jane Austen','UK') 
           INTO AUTHORS VALUES(4,'Scott Hanselman','USA') 
           INTO AUTHORS VALUES(5,'Jason N. Gaylord','USA') 
           INTO AUTHORS VALUES(6,'Pranav Rastogi','India') 
           INTO AUTHORS VALUES(7,'Todd Miranda','USA') 
           INTO AUTHORS VALUES(8,'Christian Wenz','USA') 
           select * from authors  
  
--BOOK TABLE CREATION 
 
CREATE TABLE BOOKS(ID INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, 
                  TITLE VARCHAR2(50) NOT NULL)    
--drop table books 
INSERT INTO BOOKS VALUES(1,'The Catcher in the Rye'); 
INSERT ALL INTO BOOKS VALUES(2,'Nine Stories') 
           INTO BOOKS VALUES(3,'Franny and Zooey') 
           INTO BOOKS VALUES(4,'The Great Gatsby') 
           INTO BOOKS VALUES(5,'Tender id the Night') 
           INTO BOOKS VALUES(6,'Pride and Prejudice') 
           INTO BOOKS VALUES(7,'Professional ASP.NET 4.5 in C# and VB') 
           SELECT * FROM BOOKS 
  
--BOOKSAUTHORS TABLE CREATION 
 
CREATE TABLE BOOKSAUTHORS(BOOKID INT NOT NULL, 
                          AUTHORID INT NOT NULL, 
                          FOREIGN KEY(BOOKID) REFERENCES BOOKS(ID), 
                          FOREIGN KEY(AUTHORID) REFERENCES AUTHORS(ID)) 
  
--DROP TABLE BOOKSAUTHORS 
INSERT INTO BOOKSAUTHORS VALUES (1,1) 
INSERT ALL INTO BOOKSAUTHORS VALUES(2,1) 
           INTO BOOKSAUTHORS VALUES(3,1) 
           INTO BOOKSAUTHORS VALUES(4,2) 
           INTO BOOKSAUTHORS VALUES(5,2) 
           INTO BOOKSAUTHORS VALUES(6,3) 
           INTO BOOKSAUTHORS VALUES(7,4) 
           INTO BOOKSAUTHORS VALUES(7,5) 
           INTO BOOKSAUTHORS VALUES(7,6) 
           INTO BOOKSAUTHORS VALUES(7,7) 
           INTO BOOKSAUTHORS VALUES(7,8) 
           SELECT * FROM BOOKSAUTHORS 
  
--COUNTRIES TABLE CREATION 
 
CREATE TABLE COUNTRIES(ID INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, 
                       ISO CHAR(2) NOT NULL, 
                       ISO3 CHAR(3) NOT NULL, 
                       ISONUMERIC NUMBER NOT NULL, 
                       COUNTRYNAME VARCHAR2(30) NOT NULL, 
                       CAPITAL VARCHAR2(30) NOT NULL, 
                       CONTINENTCODE CHAR(2) NOT NULL, 
                       CURRENCYCODE CHAR(3) NOT NULL 
                       ) 
  
INSERT INTO COUNTRIES VALUES (1,'AU','AUS',36,'Australia','Canberra','OC','AUD') 
INSERT ALL INTO COUNTRIES VALUES(2,'DE','DEU',276,'Germany','Berlin','EU','EUR') 
           INTO COUNTRIES VALUES(3,'IN','IND',356,'India','New Delhi','AS','INR') 
           INTO COUNTRIES VALUES(4,'LA','LAO',418,'Laos','Vientiane','AS','LAK') 
           INTO COUNTRIES VALUES(5,'US','USA',840,'United States','Washington','NA','USD') 
           INTO COUNTRIES VALUES(6,'ZW','ZWE',716,'Zimbabwe','Harare','AF','ZWL')  
           SELECT * FROM COUNTRIES      
 
                                                        QUERIES 
--DATA RETRIEVAL LANGUAGE 
 
--SELECT 
SELECT * FROM EMPLOYEES WHERE SALARY>400; 
 
--DATA MANIPULATION LANGUAGE 
  
--INSERT 
INSERT INTO EMPLOYEES VALUES(5,'Jack','Smith',1276543210,2,1,700,'05-14-2014'); 
SELECT * FROM EMPLOYEES; 
  
--DELETE  
DELETE FROM EMPLOYEES WHERE ID=5;  
  
--UPDATE  
UPDATE EMPLOYEES SET SALARY=340 WHERE ID=2;  
  
--DATA CONTROL LANGUAGE (CREATE,ALTER, DROP, TRUNCATE) 
  
--CREATE 
CREATE TABLE SAMPLE(NAME VARCHAR(30)); 
INSERT INTO SAMPLE VALUES('RAMU'); 
INSERT INTO SAMPLE VALUES('JACK'); 
  
--TRUNCATE 
TRUNCATE TABLE SAMPLE; 
DESC SAMPLE 
  
--DROP 
DROP TABLE SAMPLE; 
  
--ALTER 
ALTER TABLE EMPLOYEES ADD (GENDER VARCHAR(10));  
--MODIFY 
ALTER TABLE EMPLOYEES MODIFY GENDER VARCHAR(50);  
ALTER TABLE EMPLOYEES RENAME COLUMN GENDER TO GEN; 
--DROP 
ALTER TABLE EMPLOYEES DROP COLUMN GEN;  
DESC EMPLOYEES 
 
--DESC 
DESC EMPLOYEES; 
 
--COMPOUND EXPRESSIONS 
SELECT * FROM EMPLOYEES WHERE ID=2 AND ID=4; 
SELECT FNAME FROM EMPLOYEES WHERE ID=1 OR ID=2; 
SELECT * FROM EMPLOYEES WHERE NOT ID=4 
 
--IN OPERATOR 
SELECT * FROM EMPLOYEES WHERE ID IN (1,4,3); 
 
--BETWEEN 
SELECT * FROM EMPLOYEES WHERE ID BETWEEN 1 AND 4; 
 
--LIKE 
SELECT FNAME FROM EMPLOYEES WHERE FNAME LIKE '_o%' 
 
--ORDER BY 
SELECT * FROM EMPLOYEES ORDER BY ID; 
 
--GROUP BY 
SELECT D.NAME, COUNT(E.ID) FROM EMPLOYEES E JOIN DEPARTMENTS D ON D. ID=E.DEPARTMENTID GROUP BY D.NAME; 
 
--PARTITION BY 
SELECT DISTINCT D.NAME, COUNT(E.ID) OVER(PARTITION BY D.NAME) FROM EMPLOYEES E JOIN DEPARTMENTS D ON D. ID=E.DEPARTMENTID 
 
--CASE...WHEN 
SELECT ID, FNAME, LNAME, SALARY,CASE 
        WHEN SALARY < 1000 THEN 'Low' 
        WHEN SALARY >= 1000 AND SALARY <= 2000 THEN 'Medium' 
        ELSE 'High'  END AS Salary_Category FROM EMPLOYEES; 
 
--CONSTRAINTS 
PRIMARY KEY 
FOREIGN KEY 
UNIQUE 
DEFAULT 
NOT NULL 
CHECK 
INDEX 
 
--LITEREALS 
 
NUMERIC LITERAL - SELECT 123 AS number_literal FROM DUAL; 
BOOLEAN LITERAL - SELECT 1 AS boolean_literal_true, 0 AS boolean_literal_false FROM DUAL; 
DATE LITERAL - SELECT DATE '2022-04-16' AS date_literal FROM DUAL; 
CHARACTER LITERAL - SELECT 'A' AS character_literal FROM DUAL; 
STRING LITERAL - SELECT 'Hello, world!' AS string_literal  FROM DUAL; 
 
--STRING FUNCTIONS 
 
--LENGTH () 
SELECT FNAME, LENGTH(FNAME) AS LENGTH FROM EMPLOYEES; 
 
--COMMON TABLE EXPRESSION 
WITH EMPNAME AS (SELECT FNAME||' '||LNAME AS NAME FROM EMPLOYEES) SELECT NAME, LENGTH(NAME), SUBSTR (NAME,3, LENGTH(NAME)-2) AS P FROM EMPNAME; 
 
--CONCAT () 
SELECT CONCAT (FNAME, LNAME) FROM EMPLOYEES; 
 
--COALESCE () 
SELECT COALESCE (FNAME, '') || ', ' || COALESCE (LNAME, '') AS Fullname FROM EMPLOYEES; 
SELECT COALESCE ('FNAME', '') || ', ' || COALESCE (NULL, '') AS Fullname FROM DUAL; 
 
--ASCII () 
SELECT ASCII('a') FROM DUAL; 
 
--INSTR () 
SELECT INSTR(FNAME,'e') FROM EMPLOYEES; 
SELECT INSTR ('the sun rises in the east', 'the', -1, 1) "Position" FROM DUAL; 
SELECT INSTR ('the sun rises in the east', 'the', 1) "Position" FROM DUAL; 
 
--UPPER () 
SELECT UPPER(FNAME), LOWER(LNAME) FROM EMPLOYEES; 
 
--INITCAP () 
SELECT INITCAP ('who are you') FROM DUAL; 
 
--TRIM () 
SELECT TRIM (' hello ') FROM DUAL; 
 
--LTRIM () 
SELECT LTRIM (' hello ') FROM DUAL; 
 
--RTRIM () 
SELECT RTRIM (' hello ') FROM DUAL; 
 
--REPLACE () 
SELECT REPLACE ('Hello World','Hello','Happy') FROM DUAL; 
 
--RPAD () 
SELECT RPAD (fname,10,'*') FROM EMPLOYEES; 
 
--LPAD () 
SELECT LPAD (fname,10,'*') FROM EMPLOYEES; 
 
--TRANSLATE () 
SELECT TRANSLATE ('HELLO WORLD','OL','XY') FROM DUAL; 
 
--REVERSE () 
SELECT REVERSE ('HELLO WORLD') FROM DUAL; 
 
 
--SUBSTR () 
SELECT SUBSTR (fname, -3) FROM EMPLOYEES; 
SELECT SUBSTR ( 'Oracle Substring', 8 ) SUBSTRING FROM dual; 
SELECT SUBSTR ( 'Oracle Substring', - 16, 6 ) SUBSTRING FROM dual; 
 
--CHR () 
SELECT CHR (65) FROM DUAL; 
 
--REGULAR EXPRESSION FUNCTIONS 
 
--REGEXP_LIKE () 
SELECT FNAME FROM EMPLOYEES WHERE REGEXP_LIKE (FNAME,'^(J|K|L)') 
SELECT FNAME FROM EMPLOYEES WHERE REGEXP_LIKE (FNAME,'^[JKL]') 
 
--REGEXP_SUBSTR () 
SELECT REGEXP_SUBSTR ('hello world worls worls','\w+') FROM DUAL 
 
--REGEXP_COUNT () 
SELECT REGEXP_COUNT ('hello 1 23 4','\w+') FROM DUAL; 
SELECT REGEXP_COUNT (FNAME, 'e') FROM EMPLOYEES; 
 
--REGEXP_INSTR () 
SELECT REGEXP_INSTR('y632tggs','\d+') FROM DUAL; 
SELECT REGEXP_INSTR ('who are 908987','\d+', 'you') FROM DUAL; 
 
--NUMERIC FUNCTIONS 
 
--CEIL () 
SELECT CEIL (15.23) FROM DUAL; 
 
--ABS () 
SELECT ABS (-10) FROM DUAL; 
 
--FLOOR () 
SELECT FLOOR (15.23) FROM DUAL; 
 
--ROUND () 
SELECT ROUND (15.2345,2) FROM DUAL; 
 
--TRUNC () 
SELECT TRUNC (3.83764327) FROM DUAL; 
SELECT TRUNC (3.37846,3) FROM DUAL; 
 
--MOD () 
SELECT MOD (10,3) FROM DUAL; 
 
--POWER () 
SELECT POWER (10,2) FROM DUAL; 
 
--SQRT () 
SELECT SQRT (16) FROM DUAL; 
 
--SIGN () 
SELECT SIGN (-8) FROM DUAL; 
 
--EXP () 
SELECT EXP (1.0) FROM DUAL; 
 
--LN () 
SELECT LN (1.0) FROM DUAL; 
 
--LOG () 
SELECT LOG (10,1000) FROM DUAL; 
 
--GREATEST () 
SELECT GREATEST ( 23,-8,45,100) FROM DUAL 
 
--LEAST () 
SELECT LEAST (23,-8,45,100) FROM DUAL 
 
--SIN (), COS (), TAN () 
SELECT SIN(0), COS(0), TAN(0) FROM DUAL 
 
--DATE FUNCTIONS 
 
--SYSDATE 
SELECT SYSDATE FROM DUAL; 
 
--CURRENT_DATE 
SELECT CURRENT_DATE FROM DUAL; 
 
--CHARACTER TO DATE 
SELECT TO_DATE('24-04-2023','DD-MM-YYYY') FROM DUAL;  
 
--DATE TO CHARACTER 
SELECT TO_CHAR (SYSDATE,'DD-MM-YYYY HH24:MI:SS') FROM DUAL; 
 
--ADD_MONTHS () 
SELECT ADD_MONTHS(SYSDATE,4) FROM DUAL; 
 
--MONTHS_BETWEEN () 
SELECT MONTHS_BETWEEN ('04-13-2024', '01-01-2024') FROM DUAL; 
 
--LAST_DAY () 
SELECT LAST_DAY(SYSDATE) FROM DUAL; 
 
--EXTRACT () 
SELECT EXTRACT (YEAR FROM SYSDATE) FROM DUAL; 
 
--NEXT_DAY () 
SELECT NEXT_DAY (SYSDATE, 'MONDAY') FROM DUAL; --NEXT MONDAY 
 
--ADDING DATE 
SELECT SYSDATE + 5 FROM DUAL; -- Adds 5 days to the current date 
 
--DATE DIFFERENCE 
SELECT NEXT_DAY(SYSDATE,'MONDAY') - SYSDATE FROM DUAL; --DATE DIFF 
 
--LEAP YEAR 
with y as (select extract(year from sysdate) as yr from dual) SELECT CASE WHEN MOD(YR, 4) = 0 AND (MOD(YR, 100) != 0 OR MOD(YR, 400) = 0) THEN 1 ELSE 0 END FROM y;  --if leap year then returns 1 or 0 (CTE) 
 
 
--DATE FORMATS 
 
SELECT TO_CHAR(SYSDATE, 'CC') FROM DUAL; --century 
SELECT TO_CHAR(SYSDATE, 'D') FROM DUAL; -- day of the week (13-4-2024) 7 
SELECT TO_CHAR(SYSDATE, 'DAY') FROM DUAL; 
SELECT TO_CHAR(SYSDATE, 'DD') FROM DUAL; --day of the month 13 
SELECT TO_CHAR(SYSDATE, 'DDD') FROM DUAL; -- day of the year 104 
SELECT TO_CHAR(SYSDATE, 'DL') FROM DUAL; --Saturday, April 13, 2024 (long date format) 
SELECT TO_CHAR(SYSDATE, 'DS') FROM DUAL; --4/13/2024 short date format 
SELECT TO_CHAR(SYSDATE, 'DY') FROM DUAL; --sat abbreviation of day 
SELECT TO_CHAR(SYSTIMESTAMP, 'FF1') FROM DUAL; -- Output: Fractional seconds with 1 digit precision  
SELECT TO_CHAR(SYSDATE, 'FMMonth DD, YYYY') FROM DUAL; --April 13, 2024 
SELECT TO_CHAR(SYSDATE, 'HH24:MI:SS') FROM DUAL; -- Output: Hour in 24-hour format 
SELECT TO_CHAR(SYSDATE, 'IW') FROM DUAL; -- Output: ISO week number i.e leap week 
SELECT TO_CHAR(SYSDATE, 'MI'), 
       TO_CHAR(SYSDATE, 'MM'), 
       TO_CHAR(SYSDATE, 'MON'), 
       TO_CHAR(SYSDATE, 'MONTH') FROM DUAL;  
SELECT TO_CHAR(SYSDATE, 'Q'), 
       TO_CHAR(SYSDATE, 'SS'), 
       TO_CHAR(SYSDATE, 'TS')  FROM DUAL; --quarter(1,2,3,4), seconds 28,short time 3:39:26 PM 
SELECT TO_CHAR(SYSDATE, 'YYYY, YEAR') FROM DUAL; -- Output: "2024, TWENTY TWENTY-FOUR" 
SELECT TO_CHAR(SYSDATE, 'YYYY') AS "4-Digit Year", 
       TO_CHAR(SYSDATE, 'SYYYY') AS "4-Digit Year with Minus Sign for BC", 
       TO_CHAR(SYSDATE, 'YY') AS "2-Digit Year", 
       TO_CHAR(SYSDATE, 'YYY') AS "3-Digit Year" FROM DUAL;-- Output: "2024", "2024", "24", "024" 
SELECT TO_CHAR(TO_DATE('2022-04-16','YYYY-MM-DD'), 'CC') AS formatted_date FROM DUAL; 
SELECT TO_CHAR(DATE '2022-04-16', 'CC') AS formatted_date FROM DUAL; 
 
 
--CONVERTION FUNCTIONS 
 
--CAST () 
SELECT CAST('21-JAN-2022' AS VARCHAR2(30)) FROM dual; 
SELECT CAST(123 AS VARCHAR2(10)) FROM dual; 
 
--TO_CHAR () 
SELECT TO_CHAR(SYSDATE,'MM/DD/YYYY') FROM dual; 
SELECT TO_CHAR(123) FROM dual; 
 
--TO_DATE () 
SELECT TO_DATE('2022-01-01','YYYY-MM-DD') FROM dual; 
 
--TO_NUMBER () 
SELECT TO_NUMBER('123.45') FROM dual; 
 
--TO_TIMESTAMP () 
SELECT TO_TIMESTAMP('2024-04-13 12:30:00', 'YYYY-MM-DD HH24:MI:SS') FROM DUAL; 
 
--INTERVALS 
 
SELECT DATE '2024-04-13' + INTERVAL '1' YEAR AS "Next Year", 
       DATE '2024-04-13' + INTERVAL '30' DAY AS "30 Days Later", 
       DATE '2024-04-13' + INTERVAL '80-5' YEAR TO MONTH, 
       EXTRACT(DAY FROM INTERVAL '30 12:30:00' DAY TO SECOND) AS "Days", 
       EXTRACT(HOUR FROM INTERVAL '30 12:30:00' DAY TO SECOND) AS "Hours", 
       EXTRACT(MINUTE FROM INTERVAL '30 12:30:00' DAY TO SECOND) AS "Minutes", 
       EXTRACT(SECOND FROM INTERVAL '30 12:30:00' DAY TO SECOND) AS "Seconds" 
FROM DUAL; 
SELECT EXTRACT(YEAR FROM INTERVAL '10-3' YEAR TO MONTH) AS YEARS, 
       EXTRACT(MONTH FROM INTERVAL '10-3' YEAR TO MONTH) AS MONTHS 
FROM DUAL; 
 
--Oracle Pseudocolumns  
 
--ROWNUM 
SELECT ROWNUM, id, Fname, lname FROM employees WHERE ROWNUM <= 3; 
 
--CTE 
WITH A AS (SELECT ROWNUM AS rn,FNAME  FROM employees ) SELECT * FROM A WHERE rn > 2; 
 
--ROWID 
SELECT ROWID, id, Fname, lname FROM employees WHERE id = 4; 
  
--LEVEL 
SELECT id, Fname, lname, LEVEL 
FROM employees 
START WITH id = 1 
CONNECT BY PRIOR id = managerid; 
 
 --SEQUENCE 
CREATE SEQUENCE seq_emp_id 
 START WITH 5 
 INCREMENT BY 1; 
 
--NEXTVAL, CURRVAL 
SELECT seq_emp_id.NEXTVAL AS next_employee_id,seq_emp_id.CURRVAL AS Current_employee_id FROM DUAL; 
  
INSERT INTO EMPLOYEES VALUES(seq_emp_id.nextval,'Jack','Smith',1234997890,3,1,600,to_date('12-01-2004','DD-MM-YYYY')); 
INSERT INTO EMPLOYEES VALUES(seq_emp_id.nextval,'Rohn','Johnson',1234997890,2,1,400,to_date('7-08-2005','DD-MM-YYYY')); 
SELECT seq_emp_id.CURRVAL AS next_employee_id FROM DUAL; 
 
-- Joining Tables: 
SELECT e.*, d.Name AS Department_Name 
FROM Employees e 
INNER JOIN Departments d ON e.DepartmentId = d.Id; 
  
SELECT FNAME,D.NAME FROM EMPLOYEES E,DEPARTMENTS D WHERE E.DEPARTMENTID=D.ID; 
 
-- Self Joins: 
SELECT e1. FName AS Employee_Name, e2. FName AS Manager_Name 
FROM Employees e1 
LEFT JOIN Employees e2 ON e1. ManagerId = e2. Id; 
 
-- Outer Joins: 
SELECT * FROM EMPLOYEES e LEFT JOIN DEPARTMENTS d ON e.DEPARTMENTID = d.ID; 
SELECT * FROM EMPLOYEES e FULL OUTER JOIN DEPARTMENTS d ON e.DEPARTMENTID = d.ID; 
SELECT * FROM EMPLOYEES e RIGHT JOIN DEPARTMENTS d ON e.DEPARTMENTID = d.ID; 
 
--CROSS JOIN 
SELECT * FROM EMPLOYEES E CROSS JOIN DEPARTMENTS; 
  
-- Aggregate Functions and Advanced Techniques: count, sum, avg, min, max 
 
--COUNT () 
SELECT D.NAME AS DEPT_NAME, COUNT(E.ID) FROM EMPLOYEES E INNER JOIN DEPARTMENTS D ON E. DEPARTMENTID =D.ID GROUP BY D.NAME; 
  
-- SUM () 
SELECT D.NAME AS DEPT_NAME, SUM (E. SALARY) FROM EMPLOYEES E INNER JOIN DEPARTMENTS D ON E. DEPARTMENTID=D. ID GROUP BY D.NAME; 
  
--AVG () 
SELECT D.NAME AS DEPT_NAME, AVG (E. SALARY) FROM EMPLOYEES E INNER JOIN DEPARTMENTS D ON E. DEPARTMENTID=D.ID GROUP BY D.NAME; 
  
--MIN () 
SELECT D.NAME AS DEPT_NAME, MIN (E. SALARY) FROM EMPLOYEES E INNER JOIN DEPARTMENTS D ON E. DEPARTMENTID=D.ID GROUP BY D.NAME; 
  
 
--MAX () 
SELECT D.NAME AS DEPT_NAME, MAX(E. SALARY) FROM EMPLOYEES E INNER JOIN DEPARTMENTS D ON E. DEPARTMENTID=D.ID GROUP BY D.NAME; 
 
SELECT d.Name AS Department_Name, COUNT(e.Id) AS Total_Employees, AVG(e.Salary) AS Avg_Salary 
FROM Departments d 
LEFT JOIN Employees e ON d.Id = e.DepartmentId 
GROUP BY d.Name; 
 
-- Window Function 
SELECT e.FName, e.LName, e.Salary, AVG(e.Salary) OVER (PARTITION BY e.DepartmentId) AS Avg_Salary_By_Department FROM Employees e; 
 
SELECT DepartmentId, HireDate, Salary, SUM(Salary) OVER (PARTITION BY DepartmentId ORDER BY HireDate) AS Running_Total_Salary FROM Employees;  
 
--FIRST_VALUE 
SELECT FNAME,LNAME,SALARY,FIRST_VALUE(FNAME) OVER(PARTITION BY DEPARTMENTID ORDER BY SALARY) FROM EMPLOYEES; 
  
--LAST_VALUE 
SELECT FNAME,LNAME,SALARY,LAST_VALUE(FNAME) OVER(PARTITION BY DEPARTMENTID ORDER BY SALARY ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) FROM EMPLOYEES; 
  
--LAG 
SELECT FNAME, SALARY,LAG(FNAME) OVER( ORDER BY ID) FROM EMPLOYEES; 
  
--LEAD 
SELECT FNAME,HIREDATE,LEAD(HIREDATE) OVER(ORDER BY HIREDATE) AS NEXT_HIREDATE FROM EMPLOYEES; 
  
SELECT Id, FName, LName, DepartmentId, Salary,  
       LAG(Salary) OVER (PARTITION BY DepartmentId ORDER BY Salary) AS Prev_Salary,  
       LEAD(Salary) OVER (PARTITION BY DepartmentId ORDER BY Salary) AS Next_Salary  
FROM Employees; 
 
--ROWNUM 
SELECT Id, FName, LName, DepartmentId, Salary, ROW_NUMBER() OVER (PARTITION BY DepartmentId ORDER BY Salary DESC) AS Dept_Row_Number FROM Employees; 
 
-- Common Table Expression 
WITH EMPNAME AS (SELECT FNAME||' '||LNAME AS NAME FROM EMPLOYEES) SELECT NAME, LENGTH(NAME), SUBSTR (NAME,3, LENGTH(NAME)-2) AS P FROM EMPNAME; 
 
-- Pivoting 
SELECT * FROM (SELECT e.DepartmentId, e.Salary FROM Employees e) PIVOT (AVG(Salary) AS Avg_Salary FOR DepartmentId IN (1 AS HR_Avg_Salary, 2 AS Sales_Avg_Salary, 3 AS Tech_Avg_Salary)); 
 
SELECT * FROM (SELECT Status, COUNT (*) AS Num_Cars FROM Cars GROUP BY Status) PIVOT (sum (Num_Cars) AS Total_Car FOR Status IN ('READY' AS Ready_Cars, 'WAITING' AS Waiting_Cars, 'WORKING' AS Working_Cars)); 
select * from cars 
 
-- Unpivoting 
SELECT Unpivoted_Column, Value FROM (SELECT Id, Salary, DepartmentId FROM Employees) UNPIVOT (Value FOR Unpivoted_Column IN (Salary, DepartmentId)); 
 
SELECT Unpivoted_Column, Value FROM (SELECT Id, FName, LName, Salary, DepartmentId FROM Employees) UNPIVOT (Value FOR Unpivoted_Column IN (Id, FName, LName, Salary, DepartmentId)); 
 
-- Subqueries: 
 
--Single Row Subquery: Returns only one row. 
SELECT Name 
FROM Departments 
WHERE Id = (SELECT DepartmentId FROM Employees WHERE ID = 2); 
 
--Multiple Row Subquery: Returns multiple rows. 
SELECT FName, LName 
FROM Employees 
WHERE Salary > (SELECT AVG(Salary) FROM Employees WHERE DepartmentId = (SELECT Id FROM Departments WHERE Name = 'HR')); 
 
--Multiple Column Subquery: Returns multiple columns. 
SELECT FNAME, LNAME 
FROM Customers 
WHERE ID IN (SELECT CustomerID FROM Cars GROUP BY CustomerID HAVING COUNT(*) > 1); 
 
--Correlated Subquery: References one or more columns from the outer query. 
--salary >avg salary of their respective departments 
SELECT e.FName, e.LName, e.Salary 
FROM Employees e 
WHERE e.Salary > (SELECT AVG(Salary) FROM Employees e2 WHERE e.DepartmentId = e2. DepartmentId); 
 
--Non-Correlated Subquery: Executes independently of the outer query. 
SELECT * 
FROM Employees 
WHERE DepartmentId = (SELECT Id FROM Departments WHERE Name = 'HR'); 
 
--INLINE SUBQUERY (Find the highest salary among employees hired after 2005.) 
SELECT MAX(SAL) 
FROM (SELECT FNAME||' '||LNAME AS NAME,SALARY AS SAL FROM EMPLOYEES  
WHERE EXTRACT(YEAR FROM HIREDATE)>2005) EMP_SAL ; 
 
 
 
-- The EXISTS Operator: 
SELECT c.CModel 
FROM Cars c 
WHERE EXISTS (SELECT 1 FROM Customers cu WHERE c.CustomerId = cu.Id); 
  
-- Nulls and DISTINCT: 
SELECT DISTINCT PhoneNumber FROM Customers WHERE PhoneNumber IS NOT NULL; 
  
-- Grouping Rows: 
SELECT e.DepartmentId, COUNT (*) AS Num_Employees 
FROM Employees e 
GROUP BY e.DepartmentId; 
  
-- Combining SELECT Statements: 
SELECT Id, FName, LName FROM Employees 
UNION 
SELECT Id, FName, LName FROM Customers; 
 
--SYNONYM 
CREATE SYNONYM EMP FOR EMPLOYEES; 
SELECT * FROM EMP 
DROP SYNONYM EMP; 
 
--UNUSED 
SELECT * FROM EMPLOYEES 
ALTER TABLE EMPLOYEES SET UNUSED COLUMN PHONENUMBER 
ALTER TABLE EMPLOYEES DROP UNUSED COLUMNS 
 
--CASCADE 
CREATE TABLE parent ( 
    parent_id INT PRIMARY KEY 
); 
  
CREATE TABLE child ( 
    child_id INT PRIMARY KEY, 
    parent_id INT, 
    FOREIGN KEY (parent_id) REFERENCES parent(parent_id) 
        ON DELETE CASCADE 
        ON UPDATE CASCADE 
); 
 
--ROLLUP 
SELECT d.Name AS Department, 
       SUM(e.Salary) AS Total_Salary 
FROM Employees e 
JOIN Departments d ON e.DepartmentId = d.Id 
GROUP BY ROLLUP(d.Name); 
  
SELECT d.Name AS Department, 
       e.ManagerId, 
       SUM(e.Salary) AS Total_Salary 
FROM Employees e 
JOIN Departments d ON e.DepartmentId = d.Id 
GROUP BY ROLLUP(d.Name, e.ManagerId); 
  
--CUBE 
SELECT d.Name AS Department, 
       e.ManagerId, 
       SUM(e.Salary) AS Total_Salary 
FROM Employees e 
JOIN Departments d ON e.DepartmentId = d.Id 
GROUP BY CUBE(d.Name, e.ManagerId); 
 
--GROUPING SETS 
SELECT d.Name AS Department, 
       SUM(e.Salary) AS Total_Salary 
FROM Employees e 
JOIN Departments d ON e.DepartmentId = d.Id 
GROUP BY GROUPING SETS ((d.Name), ()); 
 
ASSIGNMENT 
 
CREATE TABLE DEPT(deptno number PRIMARY KEY, 
                  dname varchar(30) NOT NULL, 
                  loc varchar(30) NOT NULL) 
  
insert into DEPT values(10,'ACCOUNTING','NEW YORK'); 
INSERT ALL INTO DEPT VALUES(20,'RESEARCH','DALLAS') 
           INTO DEPT VALUES(30,'SALES','CHICAGO') 
           INTO DEPT VALUES(40,'OPERATIONS','BOSTON') 
           SELECT * FROM DEPT 
DROP TABLE DEPT 
  
CREATE TABLE EMP(EMPNO NUMBER PRIMARY KEY, 
                 ENAME VARCHAR(30) NOT NULL, 
                 JOB VARCHAR(20) NOT NULL, 
                 MGR NUMBER, 
                 HIREDATE DATE NOT NULL, 
                 SAL NUMBER NOT NULL, 
                 COMM NUMBER, 
                 DEPTNO NUMBER NOT NULL, 
                 FOREIGN KEY(DEPTNO) REFERENCES DEPT(DEPTNO)) 
  
INSERT INTO EMP VALUES(7369,'SMITH','CLERK',7902,'12-17-80',800,NULL,20) 
INSERT ALL INTO EMP VALUES(7499,'ALLEN','SALESMAN',7698,'02-20-81',1600,300,30) 
           INTO EMP VALUES(7521,'WARD','SALESMAN',7698,'02-22-81',1250,500,30) 
           INTO EMP VALUES(7566,'JONES','MANAGER',7839,'04-02-81',2975,NULL,20) 
           INTO EMP VALUES(7654,'MARTIN','SALESMAN',7698,'09-28-81',1250,1400,30) 
           INTO EMP VALUES(7698,'BLAKE','MANAGER',7839,'05-01-81',2850,NULL,30) 
           INTO EMP VALUES(7782,'CLARK','MANAGER',7839,'06-09-81',2450,NULL,10) 
           INTO EMP VALUES(7788,'SCOTT','ANALYST',7566,'12-09-82',3000,NULL,20) 
           INTO EMP VALUES(7839,'KING','PRESIDENT',NULL,'11-17-81',5000,NULL,10) 
           INTO EMP VALUES(7844,'TURNER','SALESMAN',7698,'09-08-81',1500,0,30) 
           INTO EMP VALUES(7876,'ADAMS','CLERK',7788,'01-12-83',1100,NULL,20) 
           INTO EMP VALUES(7900,'JAMES','CLERK',7698,'12-03-81',950,NULL,30) 
           INTO EMP VALUES(7902,'FORD','ANALYST',7566,'12-03-81',3000,NULL,20) 
           INTO EMP VALUES(7934,'MILLER','CLERK',7782,'01-23-82',1300,NULL,10) 
           SELECT * FROM EMP 
  
--ASSIGNMENTS ON OPERATORS       
  
--1)Display all the employees who are getting 2500 and excess salaries in department 20 (3 ROWS) 
SELECT ENAME FROM EMP WHERE SAL>=2500 AND DEPTNO =20  
  
--2)Display all the managers working in 20 & 30 department(2) 
SELECT ENAME,JOB,DEPTNO FROM EMP WHERE JOB='MANAGER' AND DEPTNO IN(20,30) 
 
SELECT DISTINCT(M.ENAME),M.DEPTNO,M.JOB FROM EMP E JOIN EMP M ON E.MGR=M.EMPNO WHERE M.DEPTNO=20 OR M.DEPTNO=30 ; 
SELECT DISTINCT(M.ENAME),M.DEPTNO,M.JOB FROM EMP E JOIN EMP M ON E.MGR=M.EMPNO WHERE M.DEPTNO IN (20,30) ; 
  
--3)Display all the managers who don’t have a manager (0) 
SELECT ENAME,MGR FROM EMP WHERE JOB='MANAGER'AND MGR IS NULL 
 
SELECT DISTINCT(M.ENAME) FROM EMP E JOIN EMP M ON E.MGR=M.EMPNO WHERE M.MGR IS NULL ; 
  
--4)Display all the employees who are getting some commission with their designation is neither MANANGER nor ANALYST (4) 
SELECT ENAME FROM EMP WHERE COMM>0 AND JOB NOT IN('MANAGER','ANALYST') 
  
--5)Display all the ANALYSTs whose name doesn’t ends with ‘S’ (2) 
SELECT ENAME FROM EMP WHERE ENAME NOT LIKE '%S' AND JOB='ANALYST' 
  
--6)Display all the employees whose naming is having letter ‘E’ as the last but one character(5) 
SELECT ENAME FROM EMP WHERE ENAME LIKE '%E_' 
  
--7)Display all the employees who total salary is more than 2000.(7) 
--(Total Salary = Sal + Comm) 
WITH TSAL AS (SELECT ENAME,CASE WHEN COMM IS NULL THEN 0+SAL 
                  ELSE SAL+COMM END AS TOTAL_SALARY FROM EMP)SELECT ENAME,TOTAL_SALARY FROM TSAL WHERE TOTAL_SALARY >2000 
SELECT ENAME FROM EMP WHERE SAL+NVL(COMM,0)>2000 
  
--8)Display all the employees who are getting some commission in department 20 & 30. (3) 
SELECT ENAME,COMM,DEPTNO FROM EMP WHERE NVL(COMM,0)>0 AND DEPTNO IN(20,30) 
  
--9) Display all the managers whose name doesn't start with A & S (5) 
SELECT ENAME,MGR FROM EMP WHERE JOB='MANAGER'AND ENAME NOT LIKE '[AS]%' 
 
SELECT DISTINCT(M.ENAME) FROM EMP E JOIN EMP M ON E.MGR=M.EMPNO WHERE M.ENAME NOT LIKE 'A%' AND M.ENAME NOT LIKE 'S%' ; 
SELECT DISTINCT(M.ENAME) FROM EMP E JOIN EMP M ON E.MGR=M.EMPNO WHERE NOT REGEXP_LIKE(M.ENAME, '^[AS]')  ; 
  
--10) Display all the employees who earning salary not in the range of 2500 and 5000 in department 10 & 20. (4) 
SELECT ENAME FROM EMP WHERE DEPTNO IN (10,20) AND SAL BETWEEN 2500 AND 5000  
  
--ASSIGNMENTS ON GROUPING 
--11)Display job-wise maximum salary. (5) 
SELECT JOB,MAX(SAL) FROM EMP GROUP BY JOB 
  
--12)Display the departments that are having more than 3 employees under it.(2) 
SELECT D.DNAME FROM EMP E JOIN DEPT D ON E.DEPTNO=D.DEPTNO GROUP BY D.DNAME HAVING COUNT(E.ENAME)>3 
SELECT * FROM DEPT 
  
--13)Display job-wise average salaries for the employees whose employee number is not from 7788 to 7790 (5) 
SELECT JOB,ROUND(AVG(SAL),0) FROM EMP  WHERE EMPNO NOT BETWEEN 7788 AND 7790 GROUP BY JOB 
  
--14)Display department-wise total salaries for all the Managers and Analysts, only if the average salaries for the same is greater than or equal to 3000.(0) 
SELECT D.DNAME,SUM(SAL) FROM EMP E JOIN DEPT D ON E.DEPTNO=D.DEPTNO WHERE E.JOB IN ('MANAGER','ANALYST') GROUP BY D.DNAME HAVING AVG(SAL)>=3000 
SELECT D.DNAME,AVG(SAL) FROM EMP E JOIN DEPT D ON E.DEPTNO=D.DEPTNO WHERE E.JOB IN ('MANAGER','ANALYST') GROUP BY D.DNAME 
  
CREATE TABLE SKILLS ( 
    ID NUMBER, 
    Name VARCHAR(10) 
); 
INSERT INTO SKILLS (ID, Name) VALUES (101, 'Oracle') 
INSERT ALL 
    INTO SKILLS (ID, Name) VALUES (102, 'Oracle') 
    INTO SKILLS (ID, Name) VALUES (103, 'Oracle') 
    INTO SKILLS (ID, Name) VALUES (101, 'Oracle') 
    INTO SKILLS (ID, Name) VALUES (102, 'Java') 
    INTO SKILLS (ID, Name) VALUES (103, 'Java') 
    INTO SKILLS (ID, Name) VALUES (101, 'Java') 
    INTO SKILLS (ID, Name) VALUES (102, 'Java') 
    INTO SKILLS (ID, Name) VALUES (103, 'Java') 
    INTO SKILLS (ID, Name) VALUES (101, 'Java') 
    INTO SKILLS (ID, Name) VALUES (101, 'Java') 
    INTO SKILLS (ID, Name) VALUES (101, 'Oracle') 
    INTO SKILLS (ID, Name) VALUES (101, 'VB') 
    INTO SKILLS (ID, Name) VALUES (102, 'ASP') 
SELECT * FROM SKILLS; 
  
--15)Select only the duplicate records along-with their count.(8) 
SELECT ID,NAME,COUNT(*) FROM SKILLS GROUP BY ID,NAME 
  
 
--16)Select only the non-duplicate records.(5) 
SELECT * FROM SKILLS  GROUP BY ID,NAME HAVING COUNT(*)=1 
 
--17)Select only the duplicate records that are duplicated only once. (2) 
SELECT * FROM SKILLS GROUP BY ID,NAME HAVING COUNT(*)=2 
  
--18)Select only the duplicate records that are not having the id=101.(2) 
SELECT * FROM SKILLS WHERE ID=101 GROUP BY ID,NAME HAVING COUNT(*)>1 
  
--ASSIGNMENTS ON SUBQUERIES 
  
--19)Display all the employees who are earning more than all the managers.(3) 
SELECT E.ENAME,E.SAL FROM EMP E WHERE E.SAL > ALL (SELECT SAL FROM EMP  WHERE JOB='MANAGER') 
  
SELECT E.ENAME,E.SAL FROM EMP E WHERE E.SAL > ALL (SELECT SAL FROM EMP  WHERE EMPNO IN (SELECT MGR FROM EMP )) 
  
--20)Display all the employees who are earning more than any of the managers.(5) 
SELECT E.ENAME,E.SAL FROM EMP E WHERE E.SAL > ANY (SELECT SAL FROM EMP  WHERE JOB='MANAGER') 
  
SELECT E.ENAME,E.SAL FROM EMP E WHERE E.SAL > ANY (SELECT SAL FROM EMP  WHERE EMPNO IN (SELECT MGR FROM EMP )) 
  
--21)Select employee number, job & salaries of all the Analysts who are earning more than any of the managers.(2) 
SELECT EMPNO,JOB,SAL FROM EMP WHERE JOB='ANALYST' AND SAL> ANY(SELECT SAL FROM EMP  WHERE JOB='MANAGER') 
 
SELECT EMPNO,JOB,SAL FROM EMP WHERE JOB='ANALYST' AND SAL> ANY(SELECT SAL FROM EMP  WHERE EMPNO IN (SELECT MGR FROM EMP )) 
  
--22)Select all the employees who work in DALLAS.(5) 
SELECT ENAME FROM EMP WHERE DEPTNO=(SELECT DEPTNO FROM DEPT WHERE LOC='DALLAS') 
  
--23)Select department name & location of all the employees working for CLARK.(1) 
SELECT DNAME,LOC FROM DEPT WHERE DEPTNO IN (SELECT DEPTNO FROM EMP WHERE MGR=(SELECT EMPNO FROM EMP WHERE ENAME='CLARK')) 
  
--24)Select all the departmental information for all the managers(3) 
SELECT * FROM DEPT WHERE DEPTNO IN(SELECT DEPTNO FROM EMP WHERE JOB='MANAGER') 
 
SELECT * FROM DEPT WHERE DEPTNO IN(SELECT DEPTNO FROM EMP WHERE EMPNO IN (SELECT MGR FROM EMP)) 
 
--25)Display the first maximum salary. 
SELECT MAX(SAL) FROM EMP 
  
--26)Display the second maximum salary. 
SELECT SAL FROM EMP ORDER BY SAL DESC OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY 
SELECT MAX(SAL) FROM EMP WHERE EMPNO <> (SELECT EMPNO FROM EMP WHERE SAL=(SELECT MAX(SAL) FROM EMP)) 
  
--27)Display the third maximum salary. 
SELECT SAL FROM (SELECT SAL,DENSE_RANK() OVER(ORDER BY SAL DESC)  N FROM EMP) WHERE N=3 
  
--28)Display all the managers & clerk who work in Accounting and Marketing (SALES) departments.(4) 
SELECT ENAME,JOB FROM EMP WHERE JOB IN('CLERK','MANAGER') AND DEPTNO IN(SELECT DEPTNO FROM DEPT WHERE DNAME IN('ACCOUNTING','SALES')) 
  
--29)Display all the salesmen who are not located at DALLAS.(4) 
SELECT ENAME FROM EMP WHERE JOB='SALESMAN' AND DEPTNO !=(SELECT DEPTNO FROM DEPT WHERE LOC='DALLAS'); 
  
--30)Get all the employees who work in the same departments as of SCOTT.(4) 
SELECT ENAME FROM EMP WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT') AND ENAME !='SCOTT' 
  
--31)Select all the employees who are earning same as SMITH.(0) 
SELECT ENAME FROM EMP WHERE SAL=(SELECT SAL FROM EMP WHERE ENAME='SMITH') AND ENAME!='SMITH' 
  
--32)Display all the employees who are getting some commission in marketing department where the employees have joined only on weekdays.(3) 
SELECT ENAME FROM EMP WHERE DEPTNO =(SELECT DEPTNO FROM DEPT WHERE DNAME='SALES') AND TO_CHAR(HIREDATE,'DY') IN ('MON','TUE','WED','THU','FRI') AND COMM IS NOT NULL 
  
--33)Display all the employees who are getting more than the average salaries of all the employees. (6) 
SELECT ENAME FROM EMP WHERE SAL>(SELECT AVG(SAL) FROM EMP) 
  
--ASSIGNMENTS ON JOINS 
  
--ASSIGNMENTS ON EQUI-JOINS 
 
--34)Display all the managers & clerks who work in Accounts and Marketing departments.(4) 
SELECT E.ENAME,D.DNAME,E.JOB FROM EMP E INNER JOIN DEPT D ON D.DEPTNO=E.DEPTNO WHERE E.JOB IN ('MANAGER','CLERK') AND D.DNAME IN('ACCOUNTING','SALES') 
  
--35)Display all the salesmen who are not located at DALLAS.(4) 
SELECT E.ENAME,D.LOC FROM EMP E INNER JOIN DEPT D ON D.DEPTNO=E.DEPTNO WHERE D.LOC!='DALLAS' AND E.JOB='SALESMAN'; 
  
--36)Select department name & location of all the employees working for CLARK.(1) 
SELECT D.DNAME,D.LOC FROM DEPT D INNER JOIN EMP E ON D.DEPTNO=E.DEPTNO JOIN EMP M ON M.EMPNO=E.MGR WHERE M.ENAME='CLARK' 
  
--37)Select all the departmental information for all the managers(3) 
SELECT DISTINCT D.* FROM DEPT D INNER JOIN EMP E ON D.DEPTNO=E.DEPTNO WHERE E.JOB='MANAGER' 
 
SELECT DISTINCT D.* FROM DEPT D INNER JOIN EMP E ON D.DEPTNO=E.DEPTNO JOIN EMP M ON M.EMPNO=E.MGR  
  
--38)Select all the employees who work in DALLAS. (5) 
SELECT E.ENAME,D.LOC FROM EMP E INNER JOIN DEPT D ON D.DEPTNO=E.DEPTNO WHERE D.LOC='DALLAS' 
  
--ASSIGNMENTS ON OUTER-JOINS 
  
--39)Display all the departmental information for all the existing employees and if a department has no employees display it as “No employees”. 
SELECT DISTINCT D.*,(CASE WHEN E.ENAME IS NULL THEN 'No Employees' ELSE E.ENAME END) K FROM EMP E RIGHT JOIN DEPT D ON D.DEPTNO=E.DEPTNO  
SELECT DISTINCT D.*,NVL(ENAME,'No Employees') FROM EMP E RIGHT JOIN DEPT D ON D.DEPTNO=E.DEPTNO; 
  
--40)Get all the matching & non-matching records from both the tables. 
SELECT E.*,D.* FROM EMP E FULL OUTER JOIN DEPT D ON D.DEPTNO=E.DEPTNO 
  
--41)Get only the non-matching records from DEPT table (matching records shouldn’t be selected) 
SELECT E.*,D.* FROM EMP E RIGHT OUTER JOIN DEPT D ON D.DEPTNO=E.DEPTNO WHERE E.ENAME IS NULL  
  
--42)Select all the employees name along with their manager names, and if an employee does not have a manager, display him as “CEO”.(14) 
SELECT E.ENAME AS EMPLOYEE,NVL(M.ENAME,'CEO') AS MANAGER FROM EMP E LEFT OUTER JOIN EMP M ON M.EMPNO=E.MGR 
  
--ASSIGNMENTS ON SELF-JOINS 
 
--43)Get all the employees who work in the same departments as of SCOTT(4) 
SELECT DISTINCT E.ENAME FROM EMP E JOIN EMP M ON M.EMPNO=E.MGR JOIN EMP M1 ON M1.DEPTNO=E.DEPTNO WHERE M1.ENAME='SCOTT' AND E.ENAME!='SCOTT' 
  
--44)Display all the employees who have joined before their managers.(6) 
SELECT DISTINCT E.ENAME,E.HIREDATE,M.ENAME AS MANAGER,M.HIREDATE FROM EMP E JOIN EMP M ON M.EMPNO=E.MGR WHERE E.HIREDATE<M.HIREDATE 
  
--45) List all the employees who are earning more than their managers.(2) 
SELECT DISTINCT E.ENAME,E.SAL,M.ENAME AS MANAGER,M.SAL FROM EMP E JOIN EMP M ON M.EMPNO=E.MGR WHERE E.SAL>M.SAL 
  
--46)Fetch all the employees who are earning the same salaries.(4) 
SELECT DISTINCT E.ENAME,E.SAL FROM EMP E JOIN EMP E1 ON E.SAL=E1.SAL WHERE E.EMPNO!=E1.EMPNO 
  
--47)Select all the employees who are earning same as SMITH. (1) 
SELECT DISTINCT E1.ENAME,E1.SAL FROM EMP E JOIN EMP E1 ON E.SAL=E1.SAL WHERE E.ENAME='SCOTT' AND E1.ENAME!='SCOTT' 
  
--ASSIGNMENTS ON CORRELATED SUBQUERIES 
  
--48)Write a query to get 4th max salary from EMP table 
SELECT E.SAL FROM EMP E WHERE 3=(SELECT COUNT(DISTINCT SAL) FROM EMP E1 WHERE E1.SAL>E.SAL) 
SELECT SAL FROM (SELECT SAL,DENSE_RANK() OVER(ORDER BY SAL DESC) K FROM EMP) WHERE K=4 
  
--49) Write a query to get 2 nd & 6th max salary from EMP table 
SELECT E.SAL ,'SECOND MAX SALARY' AS MAXSAL FROM EMP E WHERE 1=(SELECT COUNT(DISTINCT SAL) FROM EMP E1 WHERE E1.SAL>E.SAL) 
UNION 
SELECT E.SAL,'SIXTH MAX SALARY' AS MAXSAL FROM EMP E WHERE 5=(SELECT COUNT(DISTINCT SAL) FROM EMP E1 WHERE E1.SAL>E.SAL) 
  
--50) Write a query to get first 3 salaries from the EMP table 
SELECT DISTINCT E.SAL FROM EMP E WHERE 3>(SELECT COUNT(DISTINCT SAL) FROM EMP E1 WHERE E1.SAL>E.SAL) 
  
--51) Write a query to get 2 nd least salary from the EMP table 
SELECT DISTINCT E.SAL FROM EMP E WHERE 2>(SELECT COUNT(DISTINCT SAL) FROM EMP E1 WHERE E1.SAL<E.SAL) 
  
--52) Write a query to get least 3 salaries from the EMP table 
SELECT DISTINCT E.SAL FROM EMP E WHERE 3>(SELECT COUNT(DISTINCT SAL) FROM EMP E1 WHERE E1.SAL<E.SAL) 
